POSTGRES__URL=postgresql+asyncpg://postgres:ElonMusk@localhost:5433/weather_parser_db

UVICORN__RELOAD=True
UVICORN__HOST=127.0.0.4
UVICORN__PORT=9004

SQLALCHEMY__URL=postgresql://postgres:ElonMusk@localhost:5433/weather_parser_db

API_PREFIX=/api

PROJECT_NAME="weather-collector"
APP_SLUG="fojin-weather"

OPEN_WEATHER_TOKEN="ce4b5a17b91c4bfa357a01839abf01c2"

KAFKA_BOOTSTRAP_SERVERS="localhost:9093"
KAFKA_TOPIC="kafka"
KAFKA_CONSUMER_GROUP="group-id"

# uvicorn src.main:app --reload --host 127.0.0.1 --port 8001

# @routers.post('/create_message')
# async def send(message: Message):
#     producer = AIOKafkaProducer(loop=loop,
#                                 bootstrap_servers=servers
#                                 )
#     await producer.start()
#     try:
#         print(f'Sending message with value: {message}')
#         value_json = json.dumps(message.__dict__).encode('utf-8')
#         await producer.send_and_wait(topic=topic, value=value_json)
#     finally:
#         await producer.stop()
#
#
# async def consume():
#     consumer = AIOKafkaConsumer(topic, loop=loop,
#                                 bootstrap_servers=servers, group_id=group)
#     await consumer.start()
#     try:
#         async for msg in consumer:
#             print(f'Consumer msg: {msg}')
#     finally:
#         await consumer.stop()
#
# asyncio.create_task(consume())